---
import type { CollectionEntry } from "astro:content";
import type { HTMLTag, Polymorphic } from "astro/types";
import FormattedDate from "@/components/FormattedDate";
import { Icon } from "astro-icon/components";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
	post: CollectionEntry<"blog" | "music" | "clipping">;
	withDesc?: boolean;
};

const { post, withDesc = false } = Astro.props;
const postDate = post.data.updatedDate ?? post.data.pubDate;
const pinned: boolean = !!post.data.order;
const urlBasePath = post.collection;

const { Content } = await post.render();
---

<li class="embedded-post">
	<span>
		<a href={`/${urlBasePath}/${post.slug}/`} class="post-item">
			<h4 class="cody-link inline font-bold" >{post.data.title}</h4>
		</a>
		{ pinned &&
			<Icon 
				class="h-5 w-5 inline text-accent rotate-45 -ml-1" 
				name="mdi:pin" 
				aria-hidden="true" 
				focusable="false"
			/>
		}
	</span>
	<p class="date pr-2 mt-1">
		<FormattedDate date={postDate}/>
	</p>
	{withDesc && (
		<div class="post-content prose prose-cody prose-sm prose-headings:font-semibold prose-headings:ml-4 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none prose-a:text-accent">
		  { post.data.sourceUrl && <p><a class="source-url" href={post.data.sourceUrl}>[{post.data.sourceUrl}]</a></p> }
		  <Content />
		</div>
	  )}
</li>
<style>
	.post-item:before {
		content: "#";
		@apply text-accent-2;
	}	
	.post-content {
		@apply mt-4 prose dark:prose-invert prose-sm;
		overflow: hidden;
	}

</style>
